Context,Question,Actual Answer,Generated SQL
CREATE TABLE head (age INTEGER),How many heads of the departments are older than 56 ?,SELECT COUNT(*) FROM head WHERE age > 56,SELECT COUNT(*) FROM head WHERE age > 56
"CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)","List the name, born state and age of the heads of departments ordered by age.","SELECT name, born_state, age FROM head ORDER BY age","SELECT name, born_state, age FROM head ORDER BY age"
"CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)","List the creation year, name and budget of each department.","SELECT creation, name, budget_in_billions FROM department","SELECT creation, name, budget_in_billions FROM department GROUP BY department_in_billions"
CREATE TABLE department (budget_in_billions INTEGER),What are the maximum and minimum budget of the departments?,"SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department","SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department"
"CREATE TABLE department (num_employees INTEGER, ranking INTEGER)",What is the average number of employees of the departments whose rank is between 10 and 15?,SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15,SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15
"CREATE TABLE head (name VARCHAR, born_state VARCHAR)",What are the names of the heads who are born outside the California state?,SELECT name FROM head WHERE born_state <> 'California',SELECT name FROM head WHERE born_state > 'California'
"CREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)",What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?,SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama',SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.born_state = 'Alabama'
CREATE TABLE head (born_state VARCHAR),What are the names of the states where at least 3 heads were born?,SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3,SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3
CREATE TABLE department (creation VARCHAR),In which year were most departments established?,SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1,SELECT year FROM department GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
"CREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)",Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?,"SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'","SELECT T2.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'"
CREATE TABLE management (temporary_acting VARCHAR),How many acting statuses are there?,SELECT COUNT(DISTINCT temporary_acting) FROM management,"SELECT COUNT(*) FROM management WHERE temporary_acting = ""A"""
CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR),How many departments are led by heads who are not mentioned?,SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management),SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management)
"CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)",What are the distinct ages of the heads who are acting?,SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes',SELECT DISTINCT T1.age FROM management AS T1 JOIN head AS T2 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'N'
"CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)",List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.,SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security',SELECT t3.born_state FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id WHERE t1.name = 'Treasury' INTERSECT SELECT t3.born_state FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id WHERE t1.name = 'Homeland Security'
"CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)","Which department has more than 1 head at a time? List the id, name and the number of heads.","SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1","SELECT T1.department_id, T1.name, COUNT(*) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1"
"CREATE TABLE head (head_id VARCHAR, name VARCHAR)",Which head's name has the substring 'Ha'? List the id and name.,"SELECT head_id, name FROM head WHERE name LIKE '%Ha%'","SELECT head_id, name FROM head WHERE NOT head_id LIKE '%Ha%'"
CREATE TABLE farm (Id VARCHAR),How many farms are there?,SELECT COUNT(*) FROM farm,SELECT COUNT(*) FROM farm
CREATE TABLE farm (Total_Horses VARCHAR),List the total number of horses on farms in ascending order.,SELECT Total_Horses FROM farm ORDER BY Total_Horses,SELECT Total_Horses FROM farm ORDER BY Total_Horses
"CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)","What are the hosts of competitions whose theme is not ""Aliens""?",SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens',"SELECT hosts FROM farm_competition WHERE Theme > ""Aliens"""
"CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)",What are the themes of farm competitions sorted by year in ascending order?,SELECT Theme FROM farm_competition ORDER BY YEAR,SELECT Theme FROM farm_competition ORDER BY YEAR
"CREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)",What is the average number of working horses of farms with more than 5000 total number of horses?,SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000,SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000
CREATE TABLE farm (Cows INTEGER),What are the maximum and minimum number of cows across all farms.,"SELECT MAX(Cows), MIN(Cows) FROM farm","SELECT MAX(Cows), MIN(Cows) FROM farm"
CREATE TABLE city (Status VARCHAR),How many different statuses do cities have?,SELECT COUNT(DISTINCT Status) FROM city,SELECT COUNT(DISTINCT Status) FROM city
"CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)",List official names of cities in descending order of population.,SELECT Official_Name FROM city ORDER BY Population DESC,SELECT Official_Name FROM city ORDER BY Population DESC
"CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)",List the official name and status of the city with the largest population.,"SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1","SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1"
"CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)",Show the years and the official names of the host cities of competitions.,"SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID","SELECT T2.Year, T2.Official_Name FROM farm_competition AS T1 JOIN city AS T2 ON T1.Host_city_ID = T2.Host_city_ID"
"CREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)",Show the official names of the cities that have hosted more than one competition.,SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1,SELECT T2.Official_Name FROM farm_competition AS T1 JOIN city AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T1.Host_city_ID HAVING COUNT(*) > 1
"CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)",Show the status of the city that has hosted the greatest number of competitions.,SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1,SELECT T2.Status FROM farm_competition AS T1 JOIN city AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T1.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1
"CREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)",Please show the themes of competitions with host cities having populations larger than 1000.,SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000,SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000
"CREATE TABLE city (Status VARCHAR, Population INTEGER)",Please show the different statuses of cities and the average population of cities with each status.,"SELECT Status, AVG(Population) FROM city GROUP BY Status","SELECT Status, AVG(Population) FROM city GROUP BY Status"
CREATE TABLE city (Status VARCHAR),"Please show the different statuses, ordered by the number of cities that have each.",SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*),"SELECT Status, COUNT(*) FROM city GROUP BY Status ORDER BY COUNT(*)"
CREATE TABLE city (Status VARCHAR),List the most common type of Status across cities.,SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1,SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1
"CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)",List the official names of cities that have not held any competition.,SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition),SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)
"CREATE TABLE city (Status VARCHAR, Population INTEGER)",Show the status shared by cities with population bigger than 1500 and smaller than 500.,SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500,SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population  500
"CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)",Find the official names of cities with population bigger than 1500 or smaller than 500.,SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500,SELECT Official_Name FROM city WHERE Population > 1500 OR Population  500
"CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)","Show the census ranking of cities whose status are not ""Village"".","SELECT Census_Ranking FROM city WHERE Status <> ""Village""","SELECT Census_Ranking FROM city WHERE Status > ""Village"""
"CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)",which course has most number of registered students?,SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1,SELECT course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1
CREATE TABLE student_course_registrations (student_id VARCHAR),what is id of students who registered some courses but the least number of courses in these students?,SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1,SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1
"CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)",what are the first name and last name of all candidates?,"SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id","SELECT DISTINCT T1.first_name, T1.last_name FROM people AS T1 JOIN candidates AS T2 ON T1.candidate_id = T2.person_id"
CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR),List the id of students who never attends courses?,SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance),SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)
CREATE TABLE student_course_attendance (student_id VARCHAR),List the id of students who attended some courses?,SELECT student_id FROM student_course_attendance,SELECT student_id FROM student_course_attendance
"CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)",What are the ids of all students for courses and what are the names of those courses?,"SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id","SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id"
"CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)",What is detail of the student who most recently registered course?,SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1,SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id ORDER BY T2.registration_date DESC LIMIT 1
"CREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)",How many students attend course English?,"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""English""","SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""English"""
"CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)",How many courses do the student whose id is 171 attend?,SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171,SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE student_id = 171
"CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)",Find id of the candidate whose email is stanley.monahan@example.org?,"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = ""stanley.monahan@example.org""",SELECT T1.candidate_id FROM people AS T1 JOIN email AS T2 ON T1.email_address = T2.candidate_id WHERE T2.email_address ='stanley.monahan@example.org'
"CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)",Find id of the candidate who most recently accessed the course?,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1
"CREATE TABLE students (student_details VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)",What is detail of the student who registered the most number of courses?,SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1
CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR),List the id of students who registered some courses and the number of their registered courses?,"SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id","SELECT student_id, COUNT(*) FROM student_course_registrations GROUP BY student_id"
"CREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)",How many registed students do each course have? List course name and the number of their registered students?,"SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","SELECT T2.course_name, COUNT(*) FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name"
"CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)","Find id of candidates whose assessment code is ""Pass""?","SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = ""Pass""","SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = ""Pass"""
"CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (cell_mobile_number VARCHAR, person_id VARCHAR); CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)","Find the cell mobile number of the candidates whose assessment code is ""Fail""?","SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = ""Fail""","SELECT t3.cell_mobile_number FROM candidates AS t1 JOIN candidate_assessments AS t2 ON t1.candidate_id = t2.candidate_id WHERE t1.aessment_outcome_code = ""Fail"""
"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)",What are the id of students who registered course 301?,SELECT student_id FROM student_course_attendance WHERE course_id = 301,SELECT student_id FROM student_course_attendance WHERE course_id = 301
"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)",What is the id of the student who most recently registered course 301?,SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1,SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1
"CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)",Find distinct cities of addresses of people?,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id
"CREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)",Find distinct cities of address of students?,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T3.person_id = T3.student_id
CREATE TABLE courses (course_name VARCHAR),List the names of courses in alphabetical order?,SELECT course_name FROM courses ORDER BY course_name,SELECT course_name FROM courses ORDER BY course_name
CREATE TABLE people (first_name VARCHAR),List the first names of people in alphabetical order?,SELECT first_name FROM people ORDER BY first_name,SELECT first_name FROM people ORDER BY first_name
CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR),What are the id of students who registered courses or attended courses?,SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance,SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance
"CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)",Find the id of courses which are registered or attended by student whose id is 121?,SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121,SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121
CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR),What are all info of students who registered courses but not attended courses?,SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance),SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)
"CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)",List the id of students who registered course statistics in the order of registration date.,"SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.registration_date","SELECT T1.student_id FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = ""statistics"" ORDER BY T1.registration_date"
"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)",List the id of students who attended  statistics courses in the order of attendance date.,"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.date_of_attendance","SELECT T1.student_id FROM student_course_attendance AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = ""statistics"" ORDER BY T1.date_of_attendance"
"CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)",Give me the dates when the max temperature was higher than 85.,SELECT date FROM weather WHERE max_temperature_f > 85,SELECT date FROM weather WHERE max_temperature_f > 85
"CREATE TABLE station (name VARCHAR, lat INTEGER)",What are the names of stations that have latitude lower than 37.5?,SELECT name FROM station WHERE lat < 37.5,SELECT name FROM station WHERE lat  37.5
"CREATE TABLE station (city VARCHAR, lat INTEGER)","For each city, return the highest latitude among its stations.","SELECT city, MAX(lat) FROM station GROUP BY city","SELECT city, MAX(lat) FROM station GROUP BY city"
"CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)",Give me the start station and end station for the trips with the three oldest id.,"SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3","SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3"
"CREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)",What is the average latitude and longitude of stations located in San Jose city?,"SELECT AVG(lat), AVG(long) FROM station WHERE city = ""San Jose""","SELECT AVG(lat), AVG(long) FROM station WHERE city = ""San Jose"""
"CREATE TABLE trip (id VARCHAR, duration VARCHAR)",What is the id of the trip that has the shortest duration?,SELECT id FROM trip ORDER BY duration LIMIT 1,SELECT id FROM trip ORDER BY duration LIMIT 1
"CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)",What is the total and maximum duration of trips with bike id 636?,"SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636","SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636"
"CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER, date VARCHAR)","For each zip code, return the average mean temperature of August there.","SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code","SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date = ""August"" GROUP BY zip_code"
CREATE TABLE trip (bike_id VARCHAR),"From the trip record, find the number of unique bikes.",SELECT COUNT(DISTINCT bike_id) FROM trip,SELECT COUNT(DISTINCT bike_id) FROM trip
CREATE TABLE station (city VARCHAR),What is the number of distinct cities the stations are located at?,SELECT COUNT(DISTINCT city) FROM station,SELECT COUNT(DISTINCT city) FROM station
CREATE TABLE station (city VARCHAR),How many stations does Mountain View city has?,"SELECT COUNT(*) FROM station WHERE city = ""Mountain View""","SELECT COUNT(*) FROM station WHERE city = ""Mountain View"""
"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)",Return the unique name for stations that have ever had 7 bikes available.,SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7,SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.station_id = T2.station_id WHERE T2.bikes_available = 7
"CREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)",Which start station had the most trips starting from August? Give me the name and id of the station.,"SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE ""8/%"" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1","SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE '%August%' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1"
"CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)",Which bike traveled the most often in zip code 94002?,SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1
"CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)",How many days had both mean humidity above 50 and mean visibility above 8?,SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8,SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 INTERSECT SELECT COUNT(*) FROM weather WHERE mean_visibility_miles > 8
"CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)","What is the latitude, longitude, city of the station from which the shortest trip started?","SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1","SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.start_station_id = T2.id ORDER BY T2.duration LIMIT 1"
"CREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)",What are the ids of stations that are located in San Francisco and have average bike availability above 10.,"SELECT id FROM station WHERE city = ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10","SELECT station_id FROM station WHERE city = ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10)"
"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE station (name VARCHAR, id VARCHAR, installation_date VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)",What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?,"SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE ""12/%""","SELECT T2.name, T2.id FROM status AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING AVG(bikes_available) > 14 UNION SELECT T2.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.installation_date LIKE '%December%'"
"CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)",What is the 3 most common cloud cover rates in the region of zip code 94107?,SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3,SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3
"CREATE TABLE weather (zip_code VARCHAR, mean_sea_level_pressure_inches INTEGER)",What is the zip code in which the average mean sea level pressure is the lowest?,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1
"CREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)",What is the average bike availability in stations that are not located in Palo Alto?,"SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = ""Palo Alto"")","SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT station_id FROM station WHERE city = ""Palo Alto"")"
"CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)",What is the average longitude of stations that never had bike availability more than 10?,SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10),SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)
"CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)",When and in what zip code did max temperature reach 80?,"SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80","SELECT date, zip_code FROM weather WHERE max_temperature_f = 80"
"CREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)",Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.,SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60,SELECT id FROM trip WHERE zip_code = 'A' GROUP BY id HAVING AVG(mean_temperature_f) > 60
"CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)","For each zip code, return how many times max wind speed reached 25?","SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code","SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph = 25 GROUP BY zip_code"
"CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)",On which day and in which zip code was the min dew point lower than any day in zip code 94107?,"SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)","SELECT date, zip_code FROM weather WHERE min_dew_point_f  (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)"
"CREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)","For each trip, return its ending station's installation date.","SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id",SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id
"CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)",Which trip started from the station with the largest dock count? Give me the trip id.,SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1,SELECT t3.id FROM station AS t1 JOIN trip AS t2 ON t1.start_station_id = t2.id ORDER BY t1.dock_count DESC LIMIT 1
"CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)",Count the number of trips that did not end in San Francisco city.,"SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> ""San Francisco""","SELECT COUNT(*) FROM trip WHERE NOT id IN (SELECT id FROM station WHERE city = ""San Francisco"")"
"CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)","In zip code 94107, on which day neither Fog nor Rain was not observed?","SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> ""Fog"" AND EVENTS <> ""Rain""",SELECT date FROM weather WHERE EVENTS = 94107 AND zip_code = 94107
"CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)",What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?,SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7,"SELECT station_id FROM station WHERE lat > 37.4"" INTERSECT SELECT station_id FROM status WHERE bikes_available  7"
"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)",What are names of stations that have average bike availability above 10 and are not located in San Jose city?,"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = ""San Jose""","SELECT name FROM station WHERE city = ""San Jose"" GROUP BY name HAVING AVG(bikes_available) > 10"
"CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)","What are the name, latitude, and city of the station with the lowest latitude?","SELECT name, lat, city FROM station ORDER BY lat LIMIT 1","SELECT name, lat, city FROM station ORDER BY lat LIMIT 1"
"CREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)","What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?","SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","SELECT date, mean_temperature_f, mean_humidity FROM weather WHERE max_gust_speed_mph = (SELECT max_gust_speed_mph FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 1)"
CREATE TABLE station (city VARCHAR),List the name and the number of stations for all the cities that have at least 15 stations.,"SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15","SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15"
"CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)",Find the ids and names of stations from which at least 200 trips started.,"SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200","SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_id HAVING COUNT(*) >= 200"
"CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)",Find the zip code in which the average mean visibility is lower than 10.,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles)  10
"CREATE TABLE station (city VARCHAR, lat INTEGER)",List all the cities in a decreasing order of each city's stations' highest latitude.,SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC,SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC
"CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)",What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,"SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5","SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
"CREATE TABLE trip (id VARCHAR, duration VARCHAR)",What are the ids and durations of the trips with the top 3 durations?,"SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3","SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3"
"CREATE TABLE station (name VARCHAR, long VARCHAR, id VARCHAR); CREATE TABLE trip (duration INTEGER, start_station_id VARCHAR)","For each station, return its longitude and the average duration of trips that started from the station.","SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id","SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T1.start_station_id"
"CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)","For each station, find its latitude and the minimum duration of trips that ended at the station.","SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id","SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.end_station_id = T2.id GROUP BY T1.end_station_id"
"CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)",List all the distinct stations from which a trip of duration below 100 started.,SELECT DISTINCT start_station_name FROM trip WHERE duration < 100,SELECT DISTINCT start_station_name FROM trip WHERE duration  100
"CREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)",Find all the zip codes in which the max dew point have never reached 70.,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70,SELECT zip_code FROM weather WHERE max_dew_point_f = '70'
"CREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)",Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.,SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103),SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)
"CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)",What are the dates in which the mean sea level pressure was between 30.3 and 31?,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31
"CREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)",Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.,"SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1","SELECT date, max_temperature_f, min_temperature_f FROM weather ORDER BY min_temperature_f LIMIT 1"
"CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)",What are the id and name of the stations that have ever had more than 12 bikes available?,"SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12","SELECT id, name FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING SUM(bikes_available) > 12"
"CREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)",Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity)  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100
"CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)",What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?,"SELECT name FROM station WHERE city = ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100","SELECT name FROM station WHERE city = ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100"
"CREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)",How many trips started from Mountain View city and ended at Palo Alto city?,"SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = ""Mountain View"" AND T3.city = ""Palo Alto""",SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id WHERE T2.city = 'Mountain View' AND T2.city = 'Palo Alto city'
"CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)",What is the average latitude and longitude of the starting points of all trips?,"SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id","SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.start_station_id = T2.id"
CREATE TABLE book (Id VARCHAR),How many books are there?,SELECT COUNT(*) FROM book,SELECT COUNT(*) FROM book
CREATE TABLE book (Writer VARCHAR),List the writers of the books in ascending alphabetical order.,SELECT Writer FROM book ORDER BY Writer,SELECT Writer FROM book ORDER BY Writer
"CREATE TABLE book (Title VARCHAR, Issues VARCHAR)",List the titles of the books in ascending order of issues.,SELECT Title FROM book ORDER BY Issues,SELECT Title FROM book ORDER BY Issues
"CREATE TABLE book (Title VARCHAR, Writer VARCHAR)","What are the titles of the books whose writer is not ""Elaine Lee""?","SELECT Title FROM book WHERE Writer <> ""Elaine Lee""","SELECT Title FROM book WHERE Writer > ""Elaine Lee"""
"CREATE TABLE book (Title VARCHAR, Issues VARCHAR)",What are the title and issues of the books?,"SELECT Title, Issues FROM book","SELECT Title, Issues FROM book"
"CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)",What are the dates of publications in descending order of price?,SELECT Publication_Date FROM publication ORDER BY Price DESC,SELECT Publication_Date FROM publication ORDER BY Price DESC
"CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)",What are the distinct publishers of publications with price higher than 5000000?,SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000,SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000
"CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)",List the publisher of the publication with the highest price.,SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1,SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1
"CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)",List the publication dates of publications with 3 lowest prices.,SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3,SELECT Publication_Date FROM publication WHERE Price = 3
"CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)",Show the title and publication dates of books.,"SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID","SELECT T2.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID"
"CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)",Show writers who have published a book with price more than 4000000.,SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000,SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000
"CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)",Show the titles of books in descending order of publication price.,SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC,SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication ORDER BY Price DESC
CREATE TABLE publication (Publisher VARCHAR),Show publishers that have more than one publication.,SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1,SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1
CREATE TABLE publication (Publisher VARCHAR),Show different publishers together with the number of publications they have.,"SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher","SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher"
CREATE TABLE publication (Publication_Date VARCHAR),Please show the most common publication date.,SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1,SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1
CREATE TABLE book (Writer VARCHAR),List the writers who have written more than one book.,SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1,SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1
"CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)",List the titles of books that are not published.,SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication),SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)
"CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)",Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.,SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000,SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  5000000
CREATE TABLE publication (Publication_Date VARCHAR),What is the number of distinct publication dates?,SELECT COUNT(DISTINCT Publication_Date) FROM publication,SELECT COUNT(DISTINCT Publication_Date) FROM publication
"CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)","Show the prices of publications whose publisher is either ""Person"" or ""Wiley""","SELECT Price FROM publication WHERE Publisher = ""Person"" OR Publisher = ""Wiley""","SELECT Price FROM publication WHERE Publisher = ""Person"" OR Publisher = ""Wiley"""
CREATE TABLE actor (Id VARCHAR),How many actors are there?,SELECT COUNT(*) FROM actor,SELECT COUNT(*) FROM actor
CREATE TABLE actor (Name VARCHAR),List the name of actors in ascending alphabetical order.,SELECT Name FROM actor ORDER BY Name,SELECT Name FROM actor ORDER BY Name
"CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)",What are the characters and duration of actors?,"SELECT Character, Duration FROM actor","SELECT Character, Duration FROM actor"
"CREATE TABLE actor (Name VARCHAR, Age VARCHAR)",List the name of actors whose age is not 20.,SELECT Name FROM actor WHERE Age <> 20,SELECT Name FROM actor WHERE Age > 20
"CREATE TABLE actor (Character VARCHAR, age VARCHAR)",What are the characters of actors in descending order of age?,SELECT Character FROM actor ORDER BY age DESC,SELECT Character FROM actor ORDER BY age DESC
"CREATE TABLE actor (Duration VARCHAR, Age VARCHAR)",What is the duration of the oldest actor?,SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1,SELECT Duration FROM actor WHERE Age = (SELECT Older AS actor FROM actor)
"CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)","What are the names of musicals with nominee ""Bob Fosse""?","SELECT Name FROM musical WHERE Nominee = ""Bob Fosse""","SELECT Name FROM musical WHERE Nominee = ""Bob Fosse"""
"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","What are the distinct nominees of the musicals with the award that is not ""Tony Award""?","SELECT DISTINCT Nominee FROM musical WHERE Award <> ""Tony Award""","SELECT DISTINCT nominee FROM musical WHERE Award > ""Tony Award"""
"CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)",Show names of actors and names of musicals they are in.,"SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID","SELECT T2.Name, T2.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID"
"CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Musical_ID VARCHAR, Name VARCHAR)","Show names of actors that have appeared in musical with name ""The Phantom of the Opera"".","SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = ""The Phantom of the Opera""","SELECT T2.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T1.Name = ""The Phantom of the Opera"""
"CREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)",Show names of actors in descending order of the year their musical is awarded.,SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC,SELECT T2.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T1.Year DESC
"CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)",Show names of musicals and the number of actors who have appeared in the musicals.,"SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID","SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID"
"CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)",Show names of musicals which have at least three actors.,SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3,SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3
CREATE TABLE musical (Nominee VARCHAR),Show different nominees and the number of musicals they have been nominated.,"SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee","SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee"
CREATE TABLE musical (Nominee VARCHAR),Please show the nominee who has been nominated the greatest number of times.,SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1,SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1
CREATE TABLE musical (RESULT VARCHAR),List the most common result of the musicals.,SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1,SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1
CREATE TABLE musical (Nominee VARCHAR),List the nominees that have been nominated more than two musicals.,SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2,SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2
"CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)",List the name of musicals that do not have actors.,SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor),SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)
"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","Show the nominees that have nominated musicals for both ""Tony Award"" and ""Drama Desk Award"".","SELECT Nominee FROM musical WHERE Award = ""Tony Award"" INTERSECT SELECT Nominee FROM musical WHERE Award = ""Drama Desk Award""","SELECT Nominee FROM musical WHERE Award = ""Tony Award"" INTERSECT SELECT Nominee FROM musical WHERE Award = ""Drama Desk Award"""
"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","Show the musical nominee with award ""Bob Fosse"" or ""Cleavant Derricks"".","SELECT Nominee FROM musical WHERE Award = ""Tony Award"" OR Award = ""Cleavant Derricks""","SELECT nominee FROM musical WHERE Award = ""Bob Fosse"" OR Award = ""Cleavant Derricks"""
"CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)","Find the emails of the user named ""Mary"".",SELECT email FROM user_profiles WHERE name = 'Mary',"SELECT email FROM user_profiles WHERE name = ""Mary"""
"CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)","What is the partition id of the user named ""Iron Man"".",SELECT partitionid FROM user_profiles WHERE name = 'Iron Man',"SELECT partitionid FROM user_profiles WHERE name = ""Iron Man"""
CREATE TABLE user_profiles (Id VARCHAR),How many users are there?,SELECT COUNT(*) FROM user_profiles,SELECT COUNT(*) FROM user_profiles
CREATE TABLE follows (Id VARCHAR),How many followers does each user have?,SELECT COUNT(*) FROM follows,"SELECT COUNT(*), user FROM follows GROUP BY user"
CREATE TABLE follows (f1 VARCHAR),Find the number of followers for each user.,SELECT COUNT(*) FROM follows GROUP BY f1,"SELECT COUNT(*), f1 FROM follows GROUP BY f1"
CREATE TABLE tweets (Id VARCHAR),Find the number of tweets in record.,SELECT COUNT(*) FROM tweets,SELECT COUNT(*) FROM tweets
CREATE TABLE tweets (UID VARCHAR),Find the number of users who posted some tweets.,SELECT COUNT(DISTINCT UID) FROM tweets,SELECT COUNT(*) FROM tweets
"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)",Find the name and email of the user whose name contains the word ‘Swift’.,"SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'","SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'"
"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)",Find the names of users whose emails contain ‘superstar’ or ‘edu’.,SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%',SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'
CREATE TABLE tweets (text VARCHAR),Return the text of tweets about the topic 'intern'.,SELECT text FROM tweets WHERE text LIKE '%intern%',SELECT text FROM tweets WHERE NOT text LIKE '%intern%'
"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)",Find the name and email of the users who have more than 1000 followers.,"SELECT name, email FROM user_profiles WHERE followers > 1000","SELECT name, email FROM user_profiles WHERE followers > 1000"
"CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift"".",SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift'),SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE COUNT(*) > (SELECT user_profiles FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T2.name = 'Tyler Swift')
"CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)",Find the name and email for the users who have more than one follower.,"SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1","SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T1.f1 HAVING COUNT(*) > 1"
"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)",Find the names of users who have more than one tweet.,SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1,SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING COUNT(*) > 1
"CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)",Find the id of users who are followed by Mary and Susan.,"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Susan""",SELECT T1.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T2.name = 'Mary' INTERSECT SELECT T1.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T2.name = 'Susan'
"CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)",Find the id of users who are followed by Mary or Susan.,"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" OR T1.name = ""Susan""",SELECT T1.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T2.name = 'Mary' OR T2.name = 'Susan'
"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)",Find the name of the user who has the largest number of followers.,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1
"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)",Find the name and email of the user followed by the least number of people.,"SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1","SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1"
"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)","List the name and number of followers for each user, and sort the results by the number of followers in descending order.","SELECT name, followers FROM user_profiles ORDER BY followers DESC","SELECT name, followers FROM user_profiles ORDER BY followers DESC"
"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)",List the names of 5 users followed by the largest number of other users.,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5
"CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)",List the text of all tweets in the order of date.,SELECT text FROM tweets ORDER BY createdate,SELECT text FROM tweets ORDER BY createdate
"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)",Find the name of each user and number of tweets tweeted by each of them.,"SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid","SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid"
"CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)",Find the name and partition id for users who tweeted less than twice.,"SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2","SELECT T1.name, T1.partid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING COUNT(*)  2"
"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","Find the name of the user who tweeted more than once, and number of tweets tweeted by them.","SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1","SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING COUNT(*) > 1"
"CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)",Find the average number of followers for the users who do not have any tweet.,SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets),SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)
"CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)",Find the average number of followers for the users who had some tweets.,SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets),SELECT AVG(followers) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.followers = T2.followers WHERE T1.UID = T2.UID
CREATE TABLE user_profiles (followers INTEGER),Find the maximum and total number of followers of all users.,"SELECT MAX(followers), SUM(followers) FROM user_profiles","SELECT MAX(followers), SUM(followers) FROM user_profiles"
CREATE TABLE catalog_contents (catalog_entry_name VARCHAR),Find the names of all the catalog entries.,SELECT DISTINCT (catalog_entry_name) FROM catalog_contents,SELECT DISTINCT catalog_entry_name FROM catalog_contents
CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR),Find the list of attribute data types possessed by more than 3 attribute definitions.,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3
"CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)","What is the attribute data type of the attribute with name ""Green""?","SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = ""Green""","SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = ""Green"""
"CREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)",Find the name and level of catalog structure with level between 5 and 10.,"SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10","SELECT t2.catalog_level_name, t2.catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
CREATE TABLE catalogs (catalog_publisher VARCHAR),"Find all the catalog publishers whose name contains ""Murray""","SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE ""%Murray%""",SELECT DISTINCT catalog_publisher FROM catalogs WHERE label LIKE '%Murray%'
CREATE TABLE catalogs (catalog_publisher VARCHAR),Which catalog publisher has published the most catalogs?,SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1,SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1
"CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)",Find the names and publication dates of all catalogs that have catalog level number greater than 5.,"SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5","SELECT t2.catalog_name, t2.date_of_publication FROM catalog_structure AS t1 JOIN catalogs AS t2 ON t1.catalog_id = t2.catalog_id GROUP BY t2.catalog_id HAVING COUNT(*) > 5"
"CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)",What are the entry names of catalog with the attribute possessed by most entries.,SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1),SELECT t2.catalog_entry_name FROM Catalog_Contents_Additional_Attributes AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id GROUP BY t2.catalog_entry_value ORDER BY COUNT(*) DESC LIMIT 1
"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)",What is the entry name of the most expensive catalog (in USD)?,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1
"CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)",What is the level name of the cheapest catalog (in USD)?,SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1,SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1
CREATE TABLE catalog_contents (price_in_euros INTEGER),What are the average and minimum price (in Euro) of all products?,"SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents","SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents"
"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)",What is the product with the highest height? Give me the catalog entry name.,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1
"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)",Find the name of the product that has the smallest capacity.,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1
"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)","Find the names of all the products whose stock number starts with ""2"".","SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%""","SELECT DISTINCT product_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%"""
"CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)",Find the names of catalog entries with level number 8.,"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = ""8""","SELECT t2.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t1.catalog_level_number = ""8"""
"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)",Find the names of the products with length smaller than 3 or height greater than 5.,SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5,SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  3 OR width > 5
"CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)",Find the name and attribute ID of the attribute definitions with attribute value 0.,"SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0","SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0"
"CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)",Find the name and capacity of products with price greater than 700 (in USD).,"SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700","SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700"
